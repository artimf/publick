import re
import json
import pandas as pd
import plotly.express as px
import streamlit as st
st.set_page_config(layout='wide')
# Регулярные выражения для фильтрации
patterns = {
    'ip_addresses': r'\b(?:\d{1,3}\.){3}\d{1,3}\b',
    'CI': r'\bCI\d{8}\b',
    'emails': r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',
    'phone_numbers': r'\+?\d{1,3}[-.\s]?\(?\d{1,4}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,9}'
}

def extract_data(text, filter_type):
    return re.findall(patterns[filter_type], text)

# Функция для страницы фильтрации данных
def page_filter():
    st.title("Фильтр данных")
    text_input = st.text_area("Введите текст:", height=200)
    filter_type = st.selectbox("Выберите фильтр:", ['ip_addresses', 'CI', 'emails', 'phone_numbers'])

    if st.button("Фильтровать"):
        if text_input:
            result = extract_data(text_input, filter_type)
            st.subheader("Результаты")
            st.text("\n".join(result) if result else "Ничего не найдено")
            st.write(result if result else "Ничего не найдено")
        else:
            st.error("Введите текст для обработки.")

# Функция для страницы панели управления
def page_panel(): 
    hide_menu_style = """
        <style>
            #MainMenu {visibility: hidden;}
            .stAppDeployButton {visibility: hidden;}
            .stAppToolbar {visibility: hidden;}
        </style>
    """
    st.markdown(hide_menu_style, unsafe_allow_html=True)

    # Загрузка JSON
    with open('combined_logs.json') as f:
        data = json.load(f)

    df = pd.DataFrame(data).T
    new_order = ['hostname', 'ip_address', 'stend', 'po', 'role',
                 'sm_hdd', 'sm_vers', 'sm_net', 'sm_dcentr', 'sm_vmware',
                 'status', 'time', 'info', 'date_create']
    df = df[[col for col in new_order if col in df.columns]]

    for col in ['info']:
        df[col] = df[col].astype(str).apply(lambda x: x.replace('\n', ' ').strip())

    st.title("АС")
    #st.sidebar.header("Фильтры")

    st.markdown("""
        <style>
            .stHorizontalBlock  {
                border: 1px solid black;
                padding: 3px;
                margin: 1px;
            }
        </style>
    """, unsafe_allow_html=True)

    col1, col2, col3, col4 = st.columns(4)
    # Размещение чекбоксов в колонках
    with col1: # Фильтр по стенду
        stend_options = sorted(df['stend'].dropna().unique())
        selected_stends = st.multiselect("Стенды", stend_options, default=stend_options) 
    with col2: # Фильтр по ПО  
        po_options = sorted(df['po'].dropna().unique())
        try:
            selected_po = st.multiselect("ПО", po_options, default=['SOWA','FlyApp','PostgreSQL','LB','NGINX'])
        except Exception as e:
            selected_po = st.multiselect("ПО", po_options)
    with col3: # Фильтр по цепочке
        role_options = sorted(df['role'].dropna().unique())
        role_filter = st.multiselect("Цепочка", role_options, default=role_options)
    with col4:
        search_term = st.text_input("Поиск по всем полям")

    filtered_df = df.copy()

    if search_term:
        filtered_df = filtered_df[filtered_df.apply(lambda row: row.astype(str).str.contains(search_term, case=False).any(), axis=1)]

    if selected_stends:
        filtered_df = filtered_df[filtered_df['stend'].isin(selected_stends)]

    if selected_po:
        filtered_df = filtered_df[filtered_df['po'].isin(selected_po)]

    if role_filter:
        filtered_df = filtered_df[filtered_df['role'].isin(role_filter)]

    st.dataframe(filtered_df)
    st.info(f"Количество записей: {len(filtered_df)}")

    if not filtered_df.empty and st.checkbox("Показать подробности"):
        st.write("Фильтр:", [selected_stends, role_filter, selected_po, search_term])
        selected_host = st.selectbox("Выберите хост", filtered_df['hostname'])
        st.json(data[next(key for key, val in data.items() if val['hostname'] == selected_host)])

    col5, col6 = st.columns(2)
    with col5:
        if not filtered_df.empty:
            #st.subheader("Распределение ролей")
            role_counts = filtered_df['po'].value_counts().reset_index()
            role_counts.columns = ['ПО', 'Количество']

            fig = px.bar(role_counts, 
                         x='Количество', 
                         y='ПО', 
                         orientation='h', 
                         text='Количество',
                         color='ПО',
                         color_discrete_sequence=px.colors.qualitative.Vivid)

            fig.update_traces(textposition='outside')
            fig.update_layout(title_text="Распределение ПО", 
                              xaxis_title="Количество серверов", 
                              yaxis_title="Роль", 
                              template="plotly_white")

            st.plotly_chart(fig)

    with col6:
        if not filtered_df.empty:
            role_counts = filtered_df['role'].value_counts().reset_index()
            role_counts.columns = ['role', 'Количество']

            fig = px.bar(role_counts, 
                         x='Количество', 
                         y='role', 
                         orientation='h', 
                         text='Количество',
                         color='role',
                         color_discrete_sequence=px.colors.qualitative.Vivid)

            fig.update_traces(textposition='outside')
            fig.update_layout(title_text="Распределение role", 
                              xaxis_title="Количество серверов", 
                              yaxis_title="Роль", 
                              template="plotly_white")

            st.plotly_chart(fig)

# Основная функция для управления страницами
def main():
    st.sidebar.title("Навигация")
    page = st.sidebar.radio("Выберите страницу", ["Панель управления","Фильтр данных"])

    if page == "Фильтр данных":
        page_filter()
    elif page == "Панель управления":
        page_panel()

if __name__ == "__main__":
    main()
